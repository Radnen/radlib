/**
* Script: parsetest.js
* Written by: Radnen
* Updated: 3/31/2013
**/

const ERROR      = -2;
const WHITESPACE = -1;
const COMMENT    = 0;
const NUM        = 1;
const PRINT      = 2;

/* This defines *my* language: */

RadLexer.register(/^[0-9]+$/, NUM);
RadLexer.register(/^print$/, PRINT);
RadLexer.register(/^#[^\n\r]*$/, COMMENT);
RadLexer.register(/^+$/, '+');
RadLexer.register(/^-$/, '-');
RadLexer.register(/^*$/, '*');
RadLexer.register(/^\/$/, '/');
RadLexer.register(/^;$/, ';');
RadLexer.register(/^[\s]+$/, WHITESPACE);
RadLexer.register(/^[^ \n\r]+$/, ERROR);

/* This lexes a file: */
//RadParser.parse(RadLexer.lex("test.radscript")).eval();

/* This defines *my* semantics: */

/*RadParser.register(STMT,
	PRINT, EXPR, function(a, b) { return new Print(b); });

RadParser.register("expr",
	"expr", '+', "expr", function(a, b, c) { return new BinExpr(b, a, c); });
RadParser.register("expr",
	"expr", '-', "expr", function(a, b, c) { return new BinExpr(b, a, c); });
RadParser.register("expr",
	"expr", '*', "expr", function(a, b, c) { return new BinExpr(b, a, c); });
RadParser.register("expr",
	"expr", '/', "expr", function(a, b, c) { return new BinExpr(b, a, c); });
RadParser.register("expr",
	NUM, function(a) { return new IntLit(a); });*/


/* This parses those tokens: */

/* This parses the tree generated by the parser: */
// RadInterpreter.run(RadParser.tree);

/* This does the above 3 at once: */
// RadInterpreter.execute("scripttest.radscript");